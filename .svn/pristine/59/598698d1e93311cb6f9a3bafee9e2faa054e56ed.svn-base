
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using Model.Services.Admin;
using Model.Services.Docente;
using Model.Services.Estudiante;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html;
using System.Data;
using System.Reflection;

namespace CAS_ADMIN.Models
{
    public class PrintPDF
    {

        //TITULOS
        static Font titleFont12 = FontFactory.GetFont("Arial", 12, Font.BOLD);
        static Font titleFont8 = FontFactory.GetFont("Arial", 8, Font.BOLD);
        static Font titleFont5 = FontFactory.GetFont("Arial", 6, Font.BOLD);
        //TEXTO
        static Font Font8 = FontFactory.GetFont("Arial", 8, Font.NORMAL);
        static Font Font5 = FontFactory.GetFont("Arial", 6, Font.NORMAL);
        //BG
        static Color BgTable = WebColors.GetRGBColor("#EEEEEE");

        #region ImprimirHorarioDocente
        public byte[] ImprimirHorarioDocente(string ID_DOCENTE)
        {
            Byte[] bytes = null;
            Docente docente = new Docente();
            Periodo perido = new Periodo();
            HorarioDocente horario = new HorarioDocente();
            try
            {
                /*DATOS*/
                docente = docente.ObtenerDocente(ID_DOCENTE);
                perido = perido.ObtenerPeriodoActivo();
                horario = horario.ObtenerHorario(ID_DOCENTE);

                Document document = new Document(PageSize.A4, 20f, 20f, 25f, 25f);
                using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream())
                {
                    PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);

                    document.Open();

                    #region Cabecera
                    List<Cabecera> list = new List<Cabecera>();
                    list.Add(new Cabecera { Titulo = "Periodo: ", Valor = perido.DESCRIPCION_PERIODO });
                    list.Add(new Cabecera { Titulo = "Documento: ", Valor = docente.ID_DOCENTE });
                    list.Add(new Cabecera { Titulo = "Docente: ", Valor = docente.APELLIDO_PATERNO_DOCENTE + " " + docente.APELLIDO_MATERNO_DOCENTE + " " + docente.PRIMER_NOMBRE_DOCENTE + " " + docente.SEGUNDO_NOMBRE_DOCENTE });
                    document.Add(TablaCabecera("Horario Docente", list));
                    #endregion

                    document.Add(TablaSeparador());
                    document.Add(TablaSeparador());
                    document.Add(TablaSeparador());

                    List<string> titulo = new List<string>();


                    #region Horario
                    PdfPTable horarioTable = new PdfPTable(7);
                    horarioTable.HorizontalAlignment = 0;
                    horarioTable.WidthPercentage = 100;
                    horarioTable.SetWidths(new float[] { 200, 100, 100, 100, 100, 100, 100 });
                    horarioTable.SpacingAfter = 40;

                    titulo.Add("HORIA/DIA");
                    titulo.Add("Lunes");
                    titulo.Add("Martes");
                    titulo.Add("Miércoles");
                    titulo.Add("Jueves");
                    titulo.Add("Viernes");
                    titulo.Add("Sábado");

                    foreach (var item in titulo)
                    {
                        PdfPCell cell1 = new PdfPCell(new Phrase(item, titleFont8));
                        cell1.BackgroundColor = BgTable;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        horarioTable.AddCell(cell1);
                    }
                    foreach (var item in horario.Horario)
                    {
                        PdfPCell horaCell = new PdfPCell(new Phrase(item.HORIA_DIA, titleFont8));
                        horaCell.BackgroundColor = BgTable;
                        horaCell.HorizontalAlignment = 1;
                        horaCell.PaddingLeft = 10f;
                        horarioTable.AddCell(horaCell);

                        PdfPCell horaLunes = new PdfPCell(new Phrase(item.LUNES, Font8));
                        horaLunes.HorizontalAlignment = 1;
                        horaLunes.PaddingLeft = 10f;
                        horarioTable.AddCell(horaLunes);

                        PdfPCell horaMartes = new PdfPCell(new Phrase(item.MARTES, Font8));
                        horaMartes.HorizontalAlignment = 1;
                        horaMartes.PaddingLeft = 10f;
                        horarioTable.AddCell(horaMartes);

                        PdfPCell horaMiercoles = new PdfPCell(new Phrase(item.MIERCOLES, Font8));
                        horaMiercoles.HorizontalAlignment = 1;
                        horaMiercoles.PaddingLeft = 10f;
                        horarioTable.AddCell(horaMiercoles);

                        PdfPCell horaJueves = new PdfPCell(new Phrase(item.JUEVES, Font8));
                        horaJueves.HorizontalAlignment = 1;
                        horaJueves.PaddingLeft = 10f;
                        horarioTable.AddCell(horaJueves);

                        PdfPCell horaViernes = new PdfPCell(new Phrase(item.VIERNES, Font8));
                        horaViernes.HorizontalAlignment = 1;
                        horaViernes.PaddingLeft = 10f;
                        horarioTable.AddCell(horaViernes);

                        PdfPCell horaSabadp = new PdfPCell(new Phrase(item.SABADO, Font8));
                        horaSabadp.HorizontalAlignment = 1;
                        horaSabadp.PaddingLeft = 10f;
                        horarioTable.AddCell(horaSabadp);

                    }
                    document.Add(horarioTable);
                    #endregion

                    #region Materia
                    PdfPTable MateriaTable = new PdfPTable(3);
                    MateriaTable.HorizontalAlignment = 0;
                    MateriaTable.WidthPercentage = 100;
                    MateriaTable.SetWidths(new float[] { 300, 300, 300 });
                    MateriaTable.SpacingAfter = 40;

                    titulo = new List<string>();
                    titulo.Add("Sede");
                    titulo.Add("Carrera");
                    titulo.Add("Materia");

                    foreach (var item in titulo)
                    {
                        PdfPCell cell1 = new PdfPCell(new Phrase(item, titleFont8));
                        cell1.BackgroundColor = BgTable;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        MateriaTable.AddCell(cell1);
                    }

                    foreach (var item in horario.CarreraMateria)
                    {
                        PdfPCell SedeCell = new PdfPCell(new Phrase(item.DESCRIPCION_UNIVERSIDAD + " - " + item.COD_SEDE, Font8));
                        SedeCell.HorizontalAlignment = 1;
                        SedeCell.PaddingLeft = 10f;
                        MateriaTable.AddCell(SedeCell);

                        PdfPCell CarreraCell = new PdfPCell(new Phrase(item.DESCRIPCION_CARRERA + " - " + item.COD_CARRERA, Font8));
                        CarreraCell.HorizontalAlignment = 1;
                        CarreraCell.PaddingLeft = 10f;
                        MateriaTable.AddCell(CarreraCell);

                        PdfPCell MaterialCell = new PdfPCell(new Phrase(item.DESCRIPCION_MATERIA + " - " + item.COD_MATERIA, Font8));
                        MaterialCell.HorizontalAlignment = 1;
                        MaterialCell.PaddingLeft = 10f;
                        MateriaTable.AddCell(MaterialCell);
                    }


                    document.Add(MateriaTable);
                    #endregion



                    //Addtional Information
                    document.Close();
                    bytes = memoryStream.ToArray();
                    memoryStream.Close();
                }
                return bytes;
            }
            catch (Exception ex)
            {
                return bytes;
            }
        }
        #endregion
        #region ImprimirNotaDocente
        public byte[] ImprimirNotaDocente(int ID_SEDE, int ID_CARRERA, int ID_NOTA, int ID_INTERVALO_DETALLE, string ID_DOCENTE)
        {
            Sede sede = new Sede();
            Carrera carrera = new Carrera();
            IntervaloDetalle intervalo = new IntervaloDetalle();
            Docente docente = new Docente();
            Periodo periodo = new Periodo();
            Calificar nota = new Calificar();
            Byte[] bytes = null;
            try
            {
                sede = sede.ObtenerSede(ID_SEDE);
                carrera = carrera.ObtenerCarrera(ID_SEDE);
                intervalo = intervalo.ObtenerIntervalo(ID_INTERVALO_DETALLE);
                docente = docente.ObtenerDocente(ID_DOCENTE);
                periodo = periodo.ObtenerPeriodoActivo();
                nota = nota.ObtenerLibreta(ID_SEDE, ID_CARRERA, ID_NOTA, ID_INTERVALO_DETALLE, ID_DOCENTE);
                Document document = new Document(PageSize.A3.Rotate(), 20f, 20f, 25f, 25f);
                using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream())
                {
                    PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);

                    document.Open();

                    #region Cabecera
                    List<Cabecera> list = new List<Cabecera>();
                    list.Add(new Cabecera { Titulo = "Periodo: ", Valor = periodo.DESCRIPCION_PERIODO });
                    list.Add(new Cabecera { Titulo = "Carrera: ", Valor = carrera.DESCRIPCION_CARRERA });
                    list.Add(new Cabecera { Titulo = "Horario: ", Valor = intervalo.INICIO_INTERVALO + "-" + intervalo.FIN_INTERVALO });
                    list.Add(new Cabecera { Titulo = "Documento: ", Valor = docente.ID_DOCENTE });
                    list.Add(new Cabecera { Titulo = "Docente: ", Valor = docente.APELLIDO_PATERNO_DOCENTE + " " + docente.APELLIDO_MATERNO_DOCENTE + " " + docente.PRIMER_NOMBRE_DOCENTE + " " + docente.SEGUNDO_NOMBRE_DOCENTE });
                    document.Add(TablaCabecera("Libreta Docente", list));
                    #endregion

                    document.Add(TablaSeparador());
                    document.Add(TablaSeparador());
                    document.Add(TablaSeparador());

                    #region NotaTitulo

                    int columnas = 0;
                    foreach (var item in nota.Parcial)
                    {
                        columnas = columnas + item.TOTAL.Value;
                    }

                    PdfPTable TituloDetalle = new PdfPTable(columnas+2);
                    TituloDetalle.WidthPercentage = 100;
                    TituloDetalle.SpacingAfter = 40;

                    List<string> titulo = new List<string>();
                    titulo.Add("N. IDENTIDAD");
                    titulo.Add("NOMBRES");

                    foreach (var item in titulo)
                    {
                        PdfPCell cell1 = new PdfPCell(new Phrase(item, titleFont5));
                        cell1.BackgroundColor = BgTable;
                        cell1.Rowspan = 2;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        TituloDetalle.AddCell(cell1);
                    }

                    foreach (var item in nota.Parcial)
                    {
                        if (item.TOTAL != 1)
                        {
                            PdfPCell cell1 = new PdfPCell(new Phrase(item.DESCRIPCION_NOTA_DETALLE, titleFont5));
                            cell1.Colspan = Convert.ToInt32(item.TOTAL);
                            cell1.BackgroundColor = BgTable;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            TituloDetalle.AddCell(cell1);
                        }
                        else
                        {
                            PdfPCell cell1 = new PdfPCell(new Phrase(item.DESCRIPCION_NOTA_DETALLE, titleFont5));
                            cell1.BackgroundColor = BgTable;
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            TituloDetalle.AddCell(cell1);
                        }
                    }

                    foreach (var item in nota.Nota_Detalla)
                    {
                        PdfPCell cell1 = new PdfPCell(new Phrase(item.DESCRIPCION_PONDERACION, titleFont5));
                        cell1.BackgroundColor = BgTable;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        TituloDetalle.AddCell(cell1);
                    }
                    foreach (var estudiante in nota.Estudiante)
                    {
                        PdfPCell cellId = new PdfPCell(new Phrase(estudiante.ID_ESTUDIANTE, Font5));
                        cellId.HorizontalAlignment = 1;
                        cellId.PaddingLeft = 10f;
                        TituloDetalle.AddCell(cellId);

                        PdfPCell cellNombre = new PdfPCell(new Phrase(estudiante.APELLIDO_PATERNO_ESTUDIANTE+" "+ estudiante.PRIMER_NOMBRE_ESTUDIANTE, Font5));
                        cellNombre.HorizontalAlignment = 1;
                        cellNombre.PaddingLeft = 10f;
                        TituloDetalle.AddCell(cellNombre);
                        foreach (var detalle in estudiante.NOTAS)
                        {

                            PdfPCell cellNota = new PdfPCell(new Phrase(detalle.VALOR_NOTA.ToString(), Font5));
                            cellNota.HorizontalAlignment = 1;
                            cellNota.PaddingLeft = 10f;
                            TituloDetalle.AddCell(cellNota);
                        }
                    }


                    document.Add(TituloDetalle);

                    #endregion


                    document.Close();
                    bytes = memoryStream.ToArray();
                    memoryStream.Close();
                }
                return bytes;
            }
            catch (Exception)
            {
                return bytes;
            }
        }
        #endregion
        #region Auxiliares
        public static PdfPTable TablaCabecera(string Titulo, List<Cabecera> lista)
        {
            PdfPTable tablaCabecera = null;
            PdfPCell cell = null;
            Phrase phrase = null;

            tablaCabecera = new PdfPTable(2);
            tablaCabecera.TotalWidth = 500f;
            tablaCabecera.LockedWidth = true;
            tablaCabecera.SetWidths(new float[] { 0.3f, 0.7f });

            //Logo
            cell = ImageCell("~/assets/images/CAS-logo.png", 65f, PdfPCell.ALIGN_LEFT);
            tablaCabecera.AddCell(cell);

            ////Datos Cabecera
            phrase = new Phrase();
            phrase.Add(new Chunk(Titulo.ToUpper() + "\n\n", titleFont12));
            foreach (var item in lista)
            {
                phrase.Add(new Chunk(item.Titulo + item.Valor + "\n\n", titleFont8));
            }
            cell = PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
            cell.VerticalAlignment = PdfCell.ALIGN_TOP;
            tablaCabecera.AddCell(cell);


            return tablaCabecera;
        }
        public static PdfPTable TablaSeparador()
        {
            /*SEPARADOR*/
            float[] anchoColumna = { 30 };
            PdfPTable separador = new PdfPTable(1);
            separador.SetTotalWidth(anchoColumna);
            separador.DefaultCell.Border = PdfTable.NO_BORDER;
            separador.DefaultCell.FixedHeight = 10;
            separador.AddCell(new Phrase("", Font8));
            return separador;
        }
        private static PdfPCell ImageCell(string path, float scale, int align)
        {
            iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(HttpContext.Current.Server.MapPath(path));
            image.ScalePercent(scale);
            PdfPCell cell = new PdfPCell(image);
            cell.BorderColor = Color.WHITE;
            cell.VerticalAlignment = PdfCell.ALIGN_TOP;
            cell.HorizontalAlignment = align;
            cell.PaddingBottom = 0f;
            cell.PaddingTop = 0f;
            return cell;
        }
        private static void DrawLine(PdfWriter writer, float x1, float y1, float x2, float y2, Color color)
        {
            PdfContentByte contentByte = writer.DirectContent;
            contentByte.SetColorStroke(color);
            contentByte.MoveTo(x1, y1);
            contentByte.LineTo(x2, y2);
            contentByte.Stroke();
        }
        private static PdfPCell PhraseCell(Phrase phrase, int align)
        {
            PdfPCell cell = new PdfPCell(phrase);
            cell.BorderColor = Color.WHITE;
            cell.VerticalAlignment = PdfCell.ALIGN_TOP;
            cell.HorizontalAlignment = align;
            cell.PaddingBottom = 2f;
            cell.PaddingTop = 0f;
            return cell;
        }
        public DataTable ToDataTable<T>(List<T> items)

        {

            DataTable dataTable = new DataTable(typeof(T).Name);

            //Get all the properties

            PropertyInfo[] Props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);

            foreach (PropertyInfo prop in Props)

            {

                //Setting column names as Property names

                dataTable.Columns.Add(prop.Name);

            }

            foreach (T item in items)

            {

                var values = new object[Props.Length];

                for (int i = 0; i < Props.Length; i++)

                {

                    //inserting property values to datatable rows

                    values[i] = Props[i].GetValue(item, null);

                }

                dataTable.Rows.Add(values);

            }

            //put a breakpoint here and check datatable

            return dataTable;

        }
        #endregion
    }
    public class Cabecera
    {
        public string Titulo { get; set; }
        public string Valor { get; set; }
    }
}
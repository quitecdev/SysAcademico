
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using Model.Services.Admin;
using Model.Services.Docente;
using Model.Services.Estudiante;
using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.text.html;

namespace CAS_ADMIN.Models
{
    public class PrintPDF
    {

        static Font titleFont = FontFactory.GetFont("Arial", 12, Font.BOLD);
        static Font boldTableFont = FontFactory.GetFont("Arial", 8, Font.BOLD);
        static Font bodyFont = FontFactory.GetFont("Arial", 8, Font.NORMAL);
        static Color TabelHeaderBackGroundColor = WebColors.GetRGBColor("#EEEEEE");


        #region ImprimirHorarioDocente
        public byte[] ImprimirHorarioDocente(string ID_DOCENTE)
        {
            Byte[] bytes = null;
            Docente docente = new Docente();
            Periodo perido = new Periodo();
            HorarioDocente horario = new HorarioDocente();
            try
            {
                /*DATOS*/
                docente = docente.ObtenerDocente(ID_DOCENTE);
                perido = perido.ObtenerPeriodoActivo();
                horario = horario.ObtenerHorario(ID_DOCENTE);

                Document document = new Document(PageSize.A4, 20f, 20f, 25f, 25f);
                using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream())
                {
                    PdfWriter writer = PdfWriter.GetInstance(document, memoryStream);
                    Phrase phrase = null;
                    PdfPCell cell = null;
                    PdfPTable table = null;
                    Color color = null;

                    document.Open();

                    #region Cabecera
                    List<Cabecera> list = new List<Cabecera>();
                    list.Add(new Cabecera { Titulo = "Periodo: ", Valor = perido.DESCRIPCION_PERIODO });
                    list.Add(new Cabecera { Titulo = "Documento: ", Valor = docente.ID_DOCENTE });
                    list.Add(new Cabecera { Titulo = "Docente: ", Valor = docente.APELLIDO_PATERNO_DOCENTE + " " + docente.APELLIDO_MATERNO_DOCENTE + " " + docente.PRIMER_NOMBRE_DOCENTE + " " + docente.SEGUNDO_NOMBRE_DOCENTE });
                    document.Add(TablaCabecera("Horario Docente", list));
                    #endregion

                    document.Add(TablaSeparador());
                    document.Add(TablaSeparador());
                    document.Add(TablaSeparador());

                    List<string> titulo = new List<string>();
                    titulo.Add("HORIA/DIA");
                    titulo.Add("Lunes");
                    titulo.Add("Martes");
                    titulo.Add("Miércoles");
                    titulo.Add("Jueves");
                    titulo.Add("Viernes");
                    titulo.Add("Sábado");

                    #region Horario
                    PdfPTable horarioTable = new PdfPTable(7);
                    horarioTable.HorizontalAlignment = 0;
                    horarioTable.WidthPercentage = 100;
                    horarioTable.SetWidths(new float[] { 200, 100, 100, 100, 100, 100, 100 });
                    horarioTable.SpacingAfter = 40;
                    //horarioTable.DefaultCell.Border = Rectangle.BOX;
                    foreach (var item in titulo)
                    {
                        PdfPCell cell1 = new PdfPCell(new Phrase(item, boldTableFont));
                        cell1.BackgroundColor = TabelHeaderBackGroundColor;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        horarioTable.AddCell(cell1);
                    }
                    foreach (var item in horario.Horario)
                    {
                        PdfPCell horaCell = new PdfPCell(new Phrase(item.HORIA_DIA, boldTableFont));
                        horaCell.BackgroundColor = TabelHeaderBackGroundColor;
                        horaCell.HorizontalAlignment = 1;
                        horaCell.PaddingLeft = 10f;
                        horaCell.Border = Rectangle.LEFT_BORDER | Rectangle.RIGHT_BORDER;
                        horarioTable.AddCell(horaCell);

                        PdfPCell horaLunes = new PdfPCell(new Phrase(item.LUNES, bodyFont));
                        horaLunes.HorizontalAlignment = 1;
                        horaLunes.PaddingLeft = 10f;
                        horaLunes.Border = Rectangle.LEFT_BORDER | Rectangle.RIGHT_BORDER;
                        horarioTable.AddCell(horaLunes);

                        PdfPCell horaMartes = new PdfPCell(new Phrase(item.MARTES, bodyFont));
                        horaMartes.HorizontalAlignment = 1;
                        horaMartes.PaddingLeft = 10f;
                        horaMartes.Border = Rectangle.LEFT_BORDER | Rectangle.RIGHT_BORDER;
                        horarioTable.AddCell(horaMartes);

                        PdfPCell horaMiercoles = new PdfPCell(new Phrase(item.MIERCOLES, bodyFont));
                        horaMiercoles.HorizontalAlignment = 1;
                        horaMiercoles.PaddingLeft = 10f;
                        horaMiercoles.Border = Rectangle.LEFT_BORDER | Rectangle.RIGHT_BORDER;
                        horarioTable.AddCell(horaMiercoles);

                        PdfPCell horaJueves = new PdfPCell(new Phrase(item.JUEVES, bodyFont));
                        horaJueves.HorizontalAlignment = 1;
                        horaJueves.PaddingLeft = 10f;
                        horaJueves.Border = Rectangle.LEFT_BORDER | Rectangle.RIGHT_BORDER;
                        horarioTable.AddCell(horaJueves);

                        PdfPCell horaViernes = new PdfPCell(new Phrase(item.VIERNES, bodyFont));
                        horaViernes.HorizontalAlignment = 1;
                        horaViernes.PaddingLeft = 10f;
                        horaViernes.Border = Rectangle.LEFT_BORDER | Rectangle.RIGHT_BORDER;
                        horarioTable.AddCell(horaViernes);

                        PdfPCell horaSabadp = new PdfPCell(new Phrase(item.SABADO, bodyFont));
                        horaSabadp.HorizontalAlignment = 1;
                        horaSabadp.PaddingLeft = 10f;
                        horaSabadp.Border = Rectangle.LEFT_BORDER | Rectangle.RIGHT_BORDER;
                        horarioTable.AddCell(horaSabadp);

                    }
                    document.Add(horarioTable);
                    #endregion



                    //Addtional Information
                    document.Close();
                    bytes = memoryStream.ToArray();
                    memoryStream.Close();
                }
                return bytes;
            }
            catch (Exception ex)
            {
                return bytes;
            }
        }
        #endregion


        public static PdfPTable TablaCabecera(string Titulo, List<Cabecera> lista)
        {
            PdfPTable tablaCabecera = null;
            PdfPCell cell = null;
            Phrase phrase = null;

            tablaCabecera = new PdfPTable(2);
            tablaCabecera.TotalWidth = 500f;
            tablaCabecera.LockedWidth = true;
            tablaCabecera.SetWidths(new float[] { 0.3f, 0.7f });

            //Logo
            cell = ImageCell("~/assets/images/CAS-logo.png", 70f, PdfPCell.ALIGN_LEFT);
            tablaCabecera.AddCell(cell);

            ////Datos Cabecera
            phrase = new Phrase();
            phrase.Add(new Chunk(Titulo + "\n", titleFont));
            foreach (var item in lista)
            {
                phrase.Add(new Chunk(item.Titulo + item.Valor + "\n", boldTableFont));
            }
            cell = PhraseCell(phrase, PdfPCell.ALIGN_LEFT);
            cell.VerticalAlignment = PdfCell.ALIGN_TOP;
            tablaCabecera.AddCell(cell);


            return tablaCabecera;
        }

        public static PdfPTable TablaSeparador()
        {
            /*SEPARADOR*/
            float[] anchoColumna = { 30 };
            PdfPTable separador = new PdfPTable(1);
            separador.SetTotalWidth(anchoColumna);
            separador.DefaultCell.Border = PdfTable.NO_BORDER;
            separador.DefaultCell.FixedHeight = 10;
            separador.AddCell(new Phrase("", bodyFont));
            return separador;
        }


        private static PdfPCell ImageCell(string path, float scale, int align)
        {
            iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(HttpContext.Current.Server.MapPath(path));
            image.ScalePercent(scale);
            PdfPCell cell = new PdfPCell(image);
            cell.BorderColor = Color.WHITE;
            cell.VerticalAlignment = PdfCell.ALIGN_TOP;
            cell.HorizontalAlignment = align;
            cell.PaddingBottom = 0f;
            cell.PaddingTop = 0f;
            return cell;
        }

        private static void DrawLine(PdfWriter writer, float x1, float y1, float x2, float y2, Color color)
        {
            PdfContentByte contentByte = writer.DirectContent;
            contentByte.SetColorStroke(color);
            contentByte.MoveTo(x1, y1);
            contentByte.LineTo(x2, y2);
            contentByte.Stroke();
        }
        private static PdfPCell PhraseCell(Phrase phrase, int align)
        {
            PdfPCell cell = new PdfPCell(phrase);
            cell.BorderColor = Color.WHITE;
            cell.VerticalAlignment = PdfCell.ALIGN_TOP;
            cell.HorizontalAlignment = align;
            cell.PaddingBottom = 2f;
            cell.PaddingTop = 0f;
            return cell;
        }

    }

    public class Cabecera
    {
        public string Titulo { get; set; }
        public string Valor { get; set; }
    }
}
@model Model.Services.Admin.Cronograma
@{
    Layout = null;
}

<script>
    $(document).ready(function () {

        //Dropdownlist Sede
        $("#ID_SEDE").change(function () {
            $("#ID_CARRERA").empty();
            $("#ID_PARALELO").empty();
            $("#ID_TIPO_INTERVALO").empty();
            if ($("#ID_SEDE").val() != "") {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("getCarreraSede", "Carrera")', // we are calling json method
                    dataType: 'json',
                    data: { id_sede: $("#ID_SEDE").val() },
                    success: function (states) {
                        // states contains the JSON formatted list
                        // of states passed from the controller
                        $("#ID_CARRERA").append('<option value=""></option>');
                        $.each(states, function (i, state) {
                            $("#ID_CARRERA").append('<option value="' + state.Value + '">' +
                                 state.Text + '</option>');
                            // here we are adding option for States

                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve states.' + ex);
                    }
                });
            }
            return false;
        })


        //Dropdownlist Carrera
        $("#ID_CARRERA").change(function () {
            $("#ID_PARALELO").empty();
            $("#ID_TIPO_INTERVALO").empty();
            if ($("#ID_CARRERA").val() != "") {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("getParalelo", "Paralelo")', // we are calling json method
                    dataType: 'json',
                    data: {},
                    success: function (states) {
                        // states contains the JSON formatted list
                        // of states passed from the controller
                        $("#ID_PARALELO").append('<option value=""></option>');
                        $.each(states, function (i, state) {
                            $("#ID_PARALELO").append('<option value="' + state.Value + '">' +
                                 state.Text + '</option>');
                            // here we are adding option for States

                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve states.' + ex);
                    }
                });
            }
            return false;
        })


        //Dropdownlist Paralelo
        $("#ID_PARALELO").change(function () {
            $("#ID_TIPO_INTERVALO").empty();
            if ($("#ID_CARRERA").val() != "") {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("getTipoIntervalo", "Intervalo")', // we are calling json method
                    dataType: 'json',
                    data: {},
                    success: function (states) {
                        // states contains the JSON formatted list
                        // of states passed from the controller
                        $("#ID_TIPO_INTERVALO").append('<option value=""></option>');
                        $.each(states, function (i, state) {
                            $("#ID_TIPO_INTERVALO").append('<option value="' + state.Value + '">' +
                                 state.Text + '</option>');
                            // here we are adding option for States

                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve states.' + ex);
                    }
                });
            }
            return false;
        })


        $(".fecha").datepicker({
            format: "dd/mm/yyyy"
        });

        $.validator.methods.date = function (value, element) {
            Globalize.culture("en-AU");
            // you can alternatively pass the culture to parseDate instead of
            // setting the culture above, like so:
            // parseDate(value, null, "en-AU")
            return this.optional(element) || Globalize.parseDate(value) !== null;
        }
    });
</script>

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h4 class="modal-title">Datos Cronograma</h4>
        </div>
        <div class="modal-body">
            <div class="row">
                <div class="col-lg-12">
                    @using (Html.BeginForm("CrearCronograma", "Cronograma", FormMethod.Post, new { onsubmit = "return SubmitForm(this,'" + @Url.Action("CrearCronograma", "Cronograma", new { id = string.Empty }) + "')", @class = "form-horizontal" }))
                        {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.ID_CRONOGRAMA)
                        <div class="form-group">
                            <label class="col-md-3 control-label">Sede</label>
                            <div class="col-md-9">
                                @Html.DropDownListFor(m => m.ID_SEDE, new SelectList(new Model.Services.Admin.Sede().ObtenerSede(), "ID_SEDE", "DESCRIPCION_UNIVERSIDAD"), " ", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ID_SEDE, "", new { @class = "text-custom" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Carrera</label>
                            <div class="col-md-9">
                                @Html.DropDownListFor(m => m.ID_CARRERA, new SelectList(string.Empty, "ID_CARRERA", "DESCRIPCION_CARRERA"), " ", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ID_CARRERA, "", new { @class = "text-custom" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Paralelo</label>
                            <div class="col-md-9">
                                @Html.DropDownListFor(m => m.ID_PARALELO, new SelectList(string.Empty, "ID_PARALELO", "DESCRIPCION_PARALELO"), " ", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ID_PARALELO, "", new { @class = "text-custom" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Modalidad</label>
                            <div class="col-md-9">
                                @Html.DropDownListFor(m => m.ID_TIPO_INTERVALO, new SelectList(string.Empty, "ID_TIPO_INTERVALO", "DESCRIPCION_TIPO_INVERTALO"), " ", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ID_TIPO_INTERVALO, "", new { @class = "text-custom" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Periodo</label>
                            <div class="col-md-9">
                                @Html.DropDownListFor(m => m.ID_PERIODO, new SelectList(new Model.Services.Admin.Periodo().ListPeriodo(), "ID_PERIODO", "DESCRIPCION_PERIODO"), " ", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ID_PERIODO, "", new { @class = "text-custom" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Descripción</label>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.DESCRIPCION_CRONOGRAMA, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DESCRIPCION_CRONOGRAMA, "", new { @class = "text-custom" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Fecha Inicio</label>
                            <div class="col-md-9">
                                <div class="input-group">
                                    @Html.EditorFor(model => model.FECHA_INICIO, "{0:dd/mm/yyyy}", new { htmlAttributes = new { @class = "form-control fecha", @type = "datetime" } })
                                    <span class="input-group-addon bg-primary b-0 text-white"><i class="ti-calendar"></i></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.FECHA_INICIO, "", new { @class = "text-custom" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label">Fecha Fin</label>
                            <div class="col-md-9">
                                <div class="input-group">
                                    @Html.EditorFor(model => model.FECHA_FIN, "{0:dd/mm/yyyy}", new { htmlAttributes = new { @class = "form-control fecha", @type = "datetime" } })
                                    <span class="input-group-addon bg-primary b-0 text-white"><i class="ti-calendar"></i></span>
                                </div>
                                @Html.ValidationMessageFor(model => model.FECHA_FIN, "", new { @class = "text-custom" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-3 control-label"></label>
                            <div class="col-md-9">
                                <button type="submit" class="btn btn-custom waves-effect waves-light m-b-5 btn-loding" data-loading-text="<span class='btn-label'><i class='fa fa-circle-o-notch fa-spin'></i></span> Guardar<span class='md-ripple'></span>"><span class="btn-label"><i class="fa fa-save"></i></span> Guardar<span class="md-ripple"></span></button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

